name: ü§ñ Copilot Auto PR Creation

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  check-and-create-pr:
    name: üöÄ Check Context and Create Copilot PR
    runs-on: ubuntu-latest
    if: |
      github.event.issue.pull_request == null &&
      contains(github.event.comment.body, '@copilot let''s action this')

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Check Bug Reproduction Workflow Status  
        id: check_bug_workflow
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            
            // Get workflow runs for the bug reproduction check
            const workflows = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'bug-reproduction-check.yml',
              per_page: 100
            });
            
            console.log(`Found ${workflows.data.workflow_runs.length} workflow runs`);
            
            // Check if any recent workflow run was triggered by this issue
            let bugWorkflowPassed = false;
            let bugWorkflowResponse = '';
            
            for (const run of workflows.data.workflow_runs) {
              // Check if this run was for our issue (by examining the trigger)
              console.log(`Checking run ${run.id} with head_branch: ${run.head_branch}`);
              
              if (run.conclusion === 'success') {
                // Get the workflow run jobs to check the AI response
                const jobs = await github.rest.actions.listJobsForWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
                
                // Get the job logs to check for 'pass' response
                for (const job of jobs.data.jobs) {
                  if (job.conclusion === 'success') {
                    try {
                      const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        job_id: job.id
                      });
                      
                      const logsText = Buffer.from(logs.data, 'base64').toString();
                      if (logsText.includes('pass')) {
                        bugWorkflowPassed = true;
                        bugWorkflowResponse = 'pass';
                        console.log(`Found 'pass' response in workflow run ${run.id}`);
                        break;
                      }
                    } catch (error) {
                      console.log(`Could not retrieve logs for job ${job.id}: ${error.message}`);
                    }
                  }
                }
                if (bugWorkflowPassed) break;
              }
            }
            
            core.setOutput('bug_workflow_passed', bugWorkflowPassed);
            core.setOutput('bug_workflow_response', bugWorkflowResponse);

      - name: üì¶ Fetch Issue Data
        id: fetch_issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            
            const issue_data = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number
            });
            
            core.setOutput('issue_number', issue_number);
            core.setOutput('title', issue_data.data.title);
            core.setOutput('body', issue_data.data.body || '');
            core.setOutput('labels', JSON.stringify(issue_data.data.labels.map(l => l.name)));
            core.setOutput('has_issue', 'true');

      - name: ‚ùå Stop if Bug Workflow Not Passed
        if: steps.check_bug_workflow.outputs.bug_workflow_passed != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ü§ñ **Copilot Auto-PR Check Failed**
              
              I cannot proceed with creating an auto-PR because the bug reproduction workflow has not passed for this issue.
              
              Please ensure:
              1. The issue is labeled as 'bug'
              2. The bug reproduction workflow has run successfully  
              3. The AI analysis returned 'pass' indicating sufficient reproduction information
              
              Once these requirements are met, you can try again with "@copilot let's action this"`
            });
            core.setFailed('Bug workflow has not passed - stopping execution');

      - name: üîç Analyze Codebase for Implementation  
        if: steps.check_bug_workflow.outputs.bug_workflow_passed == 'true'
        id: analyze_code
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the main Python files to understand the codebase
            const logParserContent = fs.readFileSync('log_parser.py', 'utf8');
            const argParserContent = fs.readFileSync('arg_parser.py', 'utf8');
            
            // Get directory structure  
            const getDirectoryTree = (dirPath, level = 0) => {
              const items = [];
              if (level > 2) return items; // Limit depth
              
              try {
                const entries = fs.readdirSync(dirPath);
                for (const entry of entries) {
                  if (entry.startsWith('.')) continue;
                  const fullPath = path.join(dirPath, entry);
                  const stat = fs.statSync(fullPath);
                  const indent = '  '.repeat(level);
                  
                  if (stat.isDirectory()) {
                    items.push(`${indent}${entry}/`);
                    items.push(...getDirectoryTree(fullPath, level + 1));
                  } else {
                    items.push(`${indent}${entry}`);
                  }
                }
              } catch (error) {
                // Skip directories we can't read
              }
              return items;
            };
            
            const directoryTree = getDirectoryTree('.').join('\n');
            
            core.setOutput('log_parser_content', logParserContent);
            core.setOutput('arg_parser_content', argParserContent);  
            core.setOutput('directory_tree', directoryTree);

      - name: ü§ñ Generate Implementation Plan
        if: steps.check_bug_workflow.outputs.bug_workflow_passed == 'true'
        id: generate_plan
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o-mini
          max-tokens: 2000
          system-prompt: |
            You are an expert Python developer working on a log parsing utility. Analyze the provided issue and codebase to create a detailed implementation plan.
            
            The codebase consists of:
            - log_parser.py: Main parsing logic with parse_log_file() and generate_report() functions
            - arg_parser.py: Command line argument parsing
            - A CLI utility that processes log files and generates reports
            
            Based on the issue description, provide:
            1. Root cause analysis of the problem
            2. Specific files and functions that need modification
            3. Detailed implementation steps
            4. Test cases that should be added
            5. Any potential edge cases to consider
            
            Format your response as a structured implementation plan.
          prompt: |
            ## Issue Details
            Title: ${{ steps.fetch_issue.outputs.title }}
            Description: ${{ steps.fetch_issue.outputs.body }}
            Labels: ${{ steps.fetch_issue.outputs.labels }}
            
            ## Codebase Structure  
            ${{ steps.analyze_code.outputs.directory_tree }}
            
            ## Current log_parser.py Content
            ```python
            ${{ steps.analyze_code.outputs.log_parser_content }}
            ```
            
            ## Current arg_parser.py Content
            ```python
            ${{ steps.analyze_code.outputs.arg_parser_content }}
            ```

      - name: üõ†Ô∏è Implement Initial Solution
        if: steps.check_bug_workflow.outputs.bug_workflow_passed == 'true'
        id: implement_solution
        uses: actions/ai-inference@v1
        with:
          model: openai/gpt-4o-mini
          max-tokens: 3000
          system-prompt: |
            You are implementing a fix based on the analysis. Provide the exact code changes needed.
            
            Rules:
            - Make minimal, surgical changes to fix the issue
            - Preserve existing functionality  
            - Add appropriate error handling
            - Include clear comments for changes
            - Follow the existing code style
            
            Respond with the specific file modifications needed in a structured format.
          prompt: |
            Based on this implementation plan:
            ${{ steps.generate_plan.outputs.response }}
            
            Provide the exact code changes needed. Format your response as:
            
            FILE: filename
            CHANGES: description of changes
            CODE:
            ```python
            [exact code to replace or add]
            ```
            
            For each file that needs modification.

      - name: üîç Check for Existing PR
        if: steps.check_bug_workflow.outputs.bug_workflow_passed == 'true'
        id: check_pr
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = ${{ steps.fetch_issue.outputs.issue_number }};
            
            // Check for existing PRs that reference this issue
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            const existingPR = prs.data.find(pr => 
              pr.title.includes(`#${issue_number}`) || 
              pr.body.includes(`#${issue_number}`) ||
              pr.body.includes(`Fixes #${issue_number}`) ||
              pr.body.includes(`Closes #${issue_number}`)
            );
            
            if (existingPR) {
              console.log(`Existing PR found: #${existingPR.number}`);
              core.setOutput('has_existing_pr', 'true');
              core.setOutput('pr_number', existingPR.number);
            } else {
              core.setOutput('has_existing_pr', 'false');
            }

      - name: üåø Create Feature Branch and Apply Changes
        if: steps.check_bug_workflow.outputs.bug_workflow_passed == 'true' && steps.check_pr.outputs.has_existing_pr == 'false'
        id: create_branch
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { exec } = require('@actions/exec');
            const issue_number = ${{ steps.fetch_issue.outputs.issue_number }};
            const issue_title = `${{ steps.fetch_issue.outputs.title }}`;
            const implementation = `${{ steps.implement_solution.outputs.response }}`;
            
            // Create a branch name from the issue
            const branch_name = `copilot/issue-${issue_number}-${issue_title
              .toLowerCase()
              .replace(/[^a-z0-9]/g, '-')
              .replace(/-+/g, '-')
              .replace(/^-|-$/g, '')
              .substring(0, 50)}`;
            
            core.setOutput('branch_name', branch_name);
            
            // Configure git
            await exec('git', ['config', 'user.name', 'github-actions[bot]']);
            await exec('git', ['config', 'user.email', 'github-actions[bot]@users.noreply.github.com']);
            
            // Create and checkout branch
            await exec('git', ['checkout', '-b', branch_name]);
            
            // Apply the implementation changes
            console.log('Applying implementation changes...');
            console.log(implementation);
            
            // Parse implementation response to apply code changes
            // This is a simplified approach - in a real implementation you'd want more robust parsing
            const lines = implementation.split('\n');
            let currentFile = null;
            let currentCode = [];
            let inCodeBlock = false;
            
            for (let i = 0; i < lines.length; i++) {
              const line = lines[i];
              
              if (line.startsWith('FILE:')) {
                // Save previous file if exists
                if (currentFile && currentCode.length > 0) {
                  const codeContent = currentCode.join('\n');
                  console.log(`Writing to ${currentFile}:`, codeContent.substring(0, 200) + '...');
                  
                  // For this demo, we'll create a simple patch file instead of modifying directly
                  fs.writeFileSync(`${currentFile}.copilot-patch`, codeContent);
                }
                
                currentFile = line.replace('FILE:', '').trim();
                currentCode = [];
                inCodeBlock = false;
              } else if (line.includes('```python')) {
                inCodeBlock = true;
                currentCode = [];
              } else if (line.includes('```') && inCodeBlock) {
                inCodeBlock = false;
              } else if (inCodeBlock) {
                currentCode.push(line);
              }
            }
            
            // Handle last file
            if (currentFile && currentCode.length > 0) {
              const codeContent = currentCode.join('\n');
              console.log(`Writing to ${currentFile}:`, codeContent.substring(0, 200) + '...');
              fs.writeFileSync(`${currentFile}.copilot-patch`, codeContent);
            }
            
            // Create a summary file
            fs.writeFileSync('COPILOT_IMPLEMENTATION.md', `# Copilot Implementation Summary
            
            ## Issue: ${issue_title}
            
            ## Implementation Plan
            ${`${{ steps.generate_plan.outputs.response }}`}
            
            ## Applied Changes
            ${implementation}
            
            ---
            Generated by GitHub Copilot Auto-PR Workflow
            `);
            
            // Commit changes
            await exec('git', ['add', '.']);
            await exec('git', ['commit', '-m', `ü§ñ Copilot: Initial implementation for issue #${issue_number}`]);
            await exec('git', ['push', 'origin', branch_name]);

      - name: üìù Create PR with Copilot Implementation
        if: steps.check_bug_workflow.outputs.bug_workflow_passed == 'true' && steps.check_pr.outputs.has_existing_pr == 'false'
        id: create_pr
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = ${{ steps.fetch_issue.outputs.issue_number }};
            const branch_name = "${{ steps.create_branch.outputs.branch_name }}";
            const issue_title = "${{ steps.fetch_issue.outputs.title }}";
            const implementation_plan = `${{ steps.generate_plan.outputs.response }}`;
            
            const pr_title = `ü§ñ Copilot: ${issue_title}`;
            const pr_body = `## ü§ñ Copilot Auto-Implementation
            
            This PR was automatically created and contains initial implementation by GitHub Copilot for issue #${issue_number}.
            
            ### Issue Summary
            ${issue_title}
            
            ### Implementation Plan
            ${implementation_plan}
            
            ### What Copilot Implemented
            - Initial code changes based on issue analysis  
            - Patch files with suggested modifications (*.copilot-patch)
            - Implementation summary in COPILOT_IMPLEMENTATION.md
            
            ### Next Steps for Review
            - [ ] Review the implementation plan and code changes
            - [ ] Apply patch files or make manual adjustments as needed
            - [ ] Add/update tests to cover the changes
            - [ ] Test the implementation thoroughly
            - [ ] Update documentation if required
            - [ ] Request human review when ready
            
            **Original Issue:** #${issue_number}
            **Triggered by:** @${{ github.event.comment.user.login }}
            
            ---
            *This PR was created automatically by GitHub Copilot after analyzing the issue and implementing an initial solution.*`;
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: pr_title,
              head: branch_name,
              base: 'main',
              body: pr_body,
              draft: false  // Not draft since Copilot has done initial work
            });
            
            console.log(`Created PR #${pr.data.number} with Copilot implementation`);
            core.setOutput('pr_number', pr.data.number);
            core.setOutput('pr_url', pr.data.html_url);
            
            // Add a comment to the original issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `ü§ñ **Copilot Implementation Complete!**
              
              I've analyzed the issue, created an implementation plan, and generated initial code changes.
              
              üìã **PR with Implementation:** ${pr.data.html_url}
              
              **What I've done:**
              - ‚úÖ Verified bug reproduction workflow passed
              - üîç Analyzed the codebase and issue requirements  
              - üìù Created detailed implementation plan
              - üõ†Ô∏è Generated initial code changes
              - üì¶ Created PR with patch files and documentation
              
              **Next steps:** Please review the implementation, test the changes, and refine as needed before merging.`
            });
            
            // React to the original comment
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: '+1'
            });

      - name: üìä Summary
        if: always()
        run: |
          echo "## Workflow Summary"
          echo "- Issue: #${{ steps.fetch_issue.outputs.issue_number }}"
          echo "- Triggered by: @${{ github.event.comment.user.login }}"
          echo "- Bug Workflow Passed: ${{ steps.check_bug_workflow.outputs.bug_workflow_passed }}"
          if [[ "${{ steps.create_pr.outputs.pr_number }}" != "" ]]; then
            echo "- Created PR: #${{ steps.create_pr.outputs.pr_number }}"
            echo "- PR URL: ${{ steps.create_pr.outputs.pr_url }}"
            echo "- Copilot Implementation: ‚úÖ Complete"
          fi